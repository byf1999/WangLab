"""
This script automatically add overhangs to generate 4 primers used to construct in-frame deletion strains,
given the original 4 primers generated by blast-primer or other tools.
Input file should be formatted as:
gene_name   p1  p2  p3  p4

Usage: python primer_generator.py [-i <input_file>] [-o <output_file>] [-p plasmid_name]
v1.0 23.07.31 byf
"""

import argparse as ap
import sys

over_hang = {
    'pre112': ['GAGCTCGATATCGCATGCGGTACCTCTAG', 'GATAGGGCCCGATCCCAAGCTTCTTCTAG'],
    'pdmk': ['CCCCCCCGAGCTCAGGTTACCCGGATCTAT', 'GAGTACGCGTCACTAGTGGGGCCCTTCTAG'],
}


def prepare_argparser(argparser):
    argparser.add_argument("-i", "--input", dest="input_file", type=str, required=True, nargs="+",
                           help="Input file path")
    argparser.add_argument("-o", "--output", dest="output_file", type=str, required=False, nargs="?",
                           help="Output file path", default=sys.stdout)
    argparser.add_argument("-p", "--plasmid", dest="plasmid_name", type=str, required=False, nargs="?",
                           help="Plasmid name", default='pRE112')

    return argparser


def check_args(args):
    # search plasmid in dict
    if args.plasmid_name.lower() not in over_hang:
        print(f'plasmid {args.plasmid_name} not found')
        sys.exit(1)

    # check output

    return args


def complement(seq):
    dct = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    seq = seq.upper()
    s = ''.join([dct[seq[-i]] for i in range(1, 11)])
    return s


def run(args):
    pcontent = ''
    for fi_path in args.input_file:
        with open(fi_path) as fi:
            while True:
                content = fi.readline()
                if not content:
                    break
                name, *seqs = content.rstrip('\n').split('\t')
                if not name:
                    continue
                seqs[0] = over_hang[args.plasmid_name.lower()][0] + seqs[0]
                seqs[3] = over_hang[args.plasmid_name.lower()][1] + seqs[3]
                seqs[1] = complement(seqs[2][:10]) + seqs[1]
                seqs[2] = complement(seqs[1][10:20]) + seqs[2]

                pcontent += '\n'.join([f'{name}-P{i + 1}\t{seq}' for i, seq in enumerate(seqs)])
                pcontent += '\n'

    if args.output_file == sys.stdout:
        print(pcontent)
    else:
        with open(args.output_file, 'w') as fo:
            fo.write(pcontent)


def main():
    description = "Add overhangs to primers"
    epilog = "For command line options of each command, type: COMMAND -h"
    # top-level parser
    argparser = ap.ArgumentParser(description=description, epilog=epilog)
    argparser = prepare_argparser(argparser)
    args = argparser.parse_args()

    args = check_args(args)
    run(args)


if __name__ == '__main__':
    main()
