"""
count_reads.py
This script count reads from a .sam file and sum up within each genes and intergenic regions based on the 5' position of reads.
Preparation: an annotation file with gff/gtf format, a sam format file generated by bowtie/bowtie2 or other tools with same function.

Before running this script, ensure the format of gff/gtf file:
    1. there is no header line in the table;
    2. the term in the 3rd column specifying cds is 'CDS';
    3. the 4th and 5th columns are the start and end position of the cds.

Then, rectify some parts in the main function(lines under "def main():")
    1. "gtf_file" is the path of your gff/gtf file
    2. "chr_search_term" is a character specifying the chromosomes in the .sam file,
    usually the same as the term in the first column of tff/gtf file;
    3. "genome_length" is the length of your genome;
    4. "col_des" is the 0-based index of the column describing cds, 8 means the 9th column;
    5. "cds_search_term" is a format of your descriptions of cds,
        eg: r'ID=(.+?);'            for ID=cds000005;Parent=GE000005
            r'gene_id "(.+?)"'      for gene_id "ETAE_0001"

Finally, move all the .sam file you want to count and this script in a same directory,
    type "python count_reads.py" or run this script in an IDE such as Pycharm or Spyder.

Usage: python count_reads.py <gtf_file> <chr_search_term> <cds_search_term> <genome_length> <sam_file_path>
Dependency: pandas
count_reads.py v1.1 (2023.2.21 byf)

count_reads.py v1.2 (2023.3.14 byf)
Add terminal parameters and a usage example

count_reads.py v1.3 (2023.3.15 byf)
Able to deal with multi-chromosomes.
Fix sum bugs.

"""
import sys

import pandas as pd
import re, os, collections, time


def genome_parser(gtf_file, chr_search_term, chrom_end, cds_search_term=r'ID=(.+?);', col_des=8):
    df = pd.read_table(gtf_file, sep='\t', header=None, comment='#')
    df = df.loc[(df.iloc[:, 0] == chr_search_term) & (df.iloc[:, 2] == 'CDS')]
    df = df.sort_values(by=3)  # sort by start pos

    df[col_des] = [re.search(cds_search_term, des).group(1) for des in df.iloc[:, col_des]]
    IGname, IGstart, IGend = ['IG_1'], [1], [0]
    for i in range(len(df) - 1):
        if df.iloc[i + 1, 3] > df.iloc[i, 4] + 1:
            IGname.append('IG_' + df.iloc[i + 1, col_des])
            IGstart.append(df.iloc[i, 4] + 1)
            IGend.append(df.iloc[i + 1, 3] - 1)
    if df.iloc[-1, 4] < chrom_end - 1:
        IGname.append('IG_chrm_end')
        IGstart.append(df.iloc[-1, 4] + 1)
        IGend.append(chrom_end)
    df1 = pd.DataFrame({3: IGstart, 4: IGend, col_des: IGname})
    df = pd.concat([df.iloc[:, [3, 4, col_des]], df1])

    df = df.sort_values(by=[3, 4])
    return list(df.iloc[:, 0]), list(df.iloc[:, 1]), list(df.iloc[:, 2])


def count_reads(sam_file, chr_search_term, chr_name, chr_start, chr_end, genome_length):
    all_pos = []
    with open(sam_file, 'r') as infile:
        while True:
            content = infile.readline()
            if not content.startswith('@'): break
        while content:
            content = content.strip('\n').split('\t')
            if not content[2] == chr_search_term:
                content = infile.readline()
                continue
            if content[1] in ['0', '+']:
                pos = int(content[3])
            elif content[1] in ['16', '-']:
                pos = int(content[3]) + len(content[9]) - 2
                # pos = int(content[3]) + len(content[4]) - 2
            else:
                content = infile.readline()
                continue
            all_pos.append(pos)
            content = infile.readline()
    c = collections.Counter(all_pos)
    all_pos0 = []
    for i in range(genome_length + 1):
        all_pos0.append(c[i])
    all_counts = []
    for name, s, e in zip(chr_name, chr_start, chr_end):
        all_counts.append(sum(all_pos0[s:e + 1]))

    with open(os.path.splitext(sam_file)[0] + '_reads.csv', 'a') as outfile:
        for name, start, end, count in zip(chr_name, chr_start, chr_end, all_counts):
            outfile.write(','.join([name, str(start), str(end), str(count)]) + '\n')

        # df = pd.DataFrame({'locus': chr_name, 'start': chr_start, 'end': chr_end, 'count': all_counts})
        # df.to_excel(os.path.splitext(sam_file)[0] + f'_reads.xlsx')


def main(args):
    # gtf_file = r'F:\LearningFiles\Master\8.TIS\ARTIST\A. veronii 2021\data\genomic_gene.gff'
    # chr_search_term = 'Contig00001'
    # genome_length = 4703168

    if not len(args) == 6:
        print(f'Usage: python {args[0]} <gtf_file> <chr_search_term> <cds_search_term> <genome_length> <sam_file_path>')
        return
        
    _, gtf_file, chr_search_term, cds_search_term, genome_length, file_path = args
    print(gtf_file, chr_search_term, cds_search_term, genome_length, file_path)
    col_des = 8
    # cds_search_term = r'ID=(.+?);'
    # cds_search_term = r'gene_id "(.+?)"'

    print(f'Reading {gtf_file}...')
    chr_terms = chr_search_term.split(';') if ';' in chr_search_term else [chr_search_term]
    lengths = genome_length.split(';') if ';' in genome_length else [genome_length]
    assert len(chr_terms) == len(lengths), 'The length of chr_search_term and genome_length should be the same.'

    for chr_search_term, genome_length in zip(chr_terms, lengths):
        chr_start, chr_end, chr_name = genome_parser(gtf_file, chr_search_term, int(genome_length),
                                                     cds_search_term=cds_search_term, col_des=col_des)
	
        file_list = os.listdir(file_path)
        for sam_file in file_list:
            if os.path.splitext(sam_file)[-1] in ('.SAM', '.sam'):
                sam_file = os.path.join(file_path, sam_file)
                if os.path.getsize(sam_file) < 1024 * 10240:
                    continue
                t0 = time.time()
                print(f'Dealing with {sam_file} on {chr_search_term}...')
                count_reads(sam_file, chr_search_term, chr_name, chr_start, chr_end, int(genome_length))
                print(f'Finished, cost {time.time() - t0:.2f} seconds\n')


if __name__ == '__main__':
    main(sys.args)
